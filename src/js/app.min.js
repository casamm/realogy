function AppConstants() {}

AppConstants.SIGN_IN_WITH_CREDENTIALS = "POST /signInWithCredentials";
AppConstants.RENEW_AUTH_TOKEN = "GET renewAuthToken";

AppConstants.GET = "get";
AppConstants.POST = "post";
AppConstants.PUT = "put";
AppConstants.DELETE = "delete";
var controller = {};
var model = {vo: {}, request: {}, delegate: {}};
var view = {components: {}};

function ApplicationFacade(multitonKey) {
    puremvc.Facade.call(this, multitonKey);
}

ApplicationFacade.prototype = Object.create(puremvc.Facade.prototype);
ApplicationFacade.prototype.constructor = ApplicationFacade;

ApplicationFacade.prototype.initializeController = function() {
    puremvc.Facade.prototype.initializeController.call(this);
    this.registerCommand(ApplicationFacade.STARTUP, controller.StartupCommand);
};


ApplicationFacade.prototype.startup = function() {
    this.sendNotification(this.constructor.STARTUP);
};

ApplicationFacade.getInstance = function(multitonKey) {
    if(puremvc.Facade.instanceMap[multitonKey] == null) {
        puremvc.Facade.instanceMap[multitonKey] = new ApplicationFacade(multitonKey);
    }
    return puremvc.Facade.instanceMap[multitonKey];
};

ApplicationFacade.STARTUP = 'startup';

ApplicationFacade.ENTITLEMENT = 'entitlement';
ApplicationFacade.ENTITLEMENT_RESULT = 'entitlementResult';
ApplicationFacade.ENTITLEMENT_FAULT = 'entitlementFault';

ApplicationFacade.BRAND = 'brand';
ApplicationFacade.BRAND_RESULT = 'brandResult';
ApplicationFacade.BRAND_FAULT = 'brandFault';

ApplicationFacade.PRODUCT = 'product';
ApplicationFacade.PRODUCT_RESULT = 'productResult';
ApplicationFacade.PRODUCT_FAULT = 'productFault';
(function(){

    function BrandCommand(){
        puremvc.SimpleCommand.call(this);
    }

    BrandCommand.prototype = Object.create(puremvc.SimpleCommand.prototype);
    BrandCommand.prototype.constructor = BrandCommand;

    BrandCommand.prototype.execute = function(notification) {
        var requestVO = notification.getBody();
        var serviceRequest = new model.request.ServiceRequest(requestVO, this.result, this);
        var serviceProxy = this.facade.retrieveProxy(model.BrandProxy.NAME);

        switch(requestVO.getRequestType()) {
            case AppConstants.GET:
                serviceProxy.get(serviceRequest);
                break;
            case AppConstants.POST:
                serviceProxy.post(serviceRequest);
                break;
            case AppConstants.DELETE:
                serviceProxy.delete(serviceRequest);
                break;
            default:
                console.log("Unknown Request - BrandCommand", requestVO);
                break;
        }
    };

    BrandCommand.prototype.result = function(notification) {
        var serviceRequest = notification.getBody();
        switch (notification.getName()) {
            case model.request.ServiceRequest.RESULT:
                this.sendNotification(ApplicationFacade.BRAND_RESULT, serviceRequest.getRequestVO());
                break;
            case model.request.ServiceRequest.FAULT:
                this.sendNotification(ApplicationFacade.BRAND_FAULT, serviceRequest.getRequestVO());
                break;
        }
    };

    controller.BrandCommand = BrandCommand;

}());
(function(){

    function EntitlementCommand(){
        puremvc.SimpleCommand.call(this);
    }

    EntitlementCommand.prototype = Object.create(puremvc.SimpleCommand.prototype);
    EntitlementCommand.prototype.constructor = EntitlementCommand;

    EntitlementCommand.prototype.execute = function(notification) {
        var requestVO = notification.getBody();
        var serviceRequest = new model.request.ServiceRequest(requestVO, this.result, this);
        var serviceProxy = this.facade.retrieveProxy(model.ServiceProxy.NAME);

        switch(requestVO.getRequestType()) {
            case AppConstants.SIGN_IN_WITH_CREDENTIALS:
                serviceProxy.signInWithCredentials(serviceRequest);
                break;
            case AppConstants.RENEW_AUTH_TOKEN:
                serviceProxy.renewAuthToken(serviceRequest);
                break;
            default:
                console.log("Unknown Request - EntitlementCommand", requestVO);
                break;
        }
    };

    EntitlementCommand.prototype.result = function(notification) {
        var serviceRequest = notification.getBody();
        switch (notification.getName()) {
            case model.request.ServiceRequest.RESULT:
                this.sendNotification(ApplicationFacade.BRAND_RESULT, serviceRequest.getRequestVO());
                break;
            case model.request.ServiceRequest.FAULT:
                this.sendNotification(ApplicationFacade.BRAND_FAULT, serviceRequest.getRequestVO());
                break;
        }
    };

    controller.EntitlementCommand = EntitlementCommand;

}());
(function(){

    function ProductCommand() {
        puremvc.SimpleCommand.call(this);
    }

    ProductCommand.prototype = Object.create(puremvc.SimpleCommand.prototype);
    ProductCommand.prototype.constructor = ProductCommand;

    ProductCommand.prototype.execute = function(notification) {
        var requestVO = notification.getBody();
        var serviceRequest = new model.request.ServiceRequest(requestVO, this.result, this);
        var productProxy = this.facade.retrieveProxy(model.ProductProxy.NAME);

        switch(requestVO.getRequestType()) {
            case AppConstants.GET:
                productProxy.get(serviceRequest);
                break;
            case AppConstants.DELETE:
                productProxy.delete(serviceRequest);
                break;
            default:
                console.log("Unknown Request - ProductCommand", requestVO);
                break;
        }
    };

    ProductCommand.prototype.result = function(notification) {
        var serviceRequest = notification.getBody();
        switch (notification.getName()) {
            case model.request.ServiceRequest.RESULT:
                this.sendNotification(ApplicationFacade.PRODUCT_RESULT, serviceRequest.getRequestVO());
                break;
            case model.request.ServiceRequest.FAULT:
                this.sendNotification(ApplicationFacade.PRODUCT_FAULT, serviceRequest.getRequestVO());
                break;
        }
    };

    controller.ProductCommand = ProductCommand;

})();
(function(){

    function StartupCommand(){
        puremvc.SimpleCommand.call(this);
    }

    StartupCommand.prototype = Object.create(puremvc.SimpleCommand.prototype);
    StartupCommand.prototype.constructor = StartupCommand;

    StartupCommand.prototype.execute = function(notification) {
        this.facade.registerCommand(ApplicationFacade.BRAND, controller.BrandCommand);
        this.facade.registerProxy(new model.BrandProxy());

        this.facade.registerCommand(ApplicationFacade.PRODUCT, controller.ProductCommand);
        this.facade.registerProxy(new model.ProductProxy());

        this.facade.registerMediator(new view.ApplicationMediator());
    };

    controller.StartupCommand = StartupCommand;

}());
(function(){

    function BrandProxy(data) {
        puremvc.Proxy.call(this, this.constructor.NAME, data);
        this.brand = new model.delegate.Brand();
    }

    BrandProxy.prototype = Object.create(puremvc.Proxy.prototype);
    BrandProxy.prototype.constructor = BrandProxy;

    BrandProxy.prototype.get = function(serviceRequest) {
        this.brand.get(serviceRequest.getRequestVO())
            .then(this.result.bind(this, serviceRequest), this.fault.bind(this, serviceRequest));
    };

    BrandProxy.prototype.post = function(serviceRequest) {
        this.brand.post(serviceRequest.getRequestVO())
            .then(this.result.bind(this, serviceRequest), this.fault.bind(this, serviceRequest));
    };

    BrandProxy.prototype.delete = function(serviceRequest) {
        this.brand.delete(serviceRequest.getRequestVO())
            .then(this.result.bind(this, serviceRequest), this.fault.bind(this, serviceRequest));
    };

    BrandProxy.prototype.result = function(serviceRequest) {
        if(serviceRequest.hasCallback()) {
            serviceRequest.notifyObserver(new puremvc.Notification(model.request.ServiceRequest.RESULT, serviceRequest));
        }
    };

    BrandProxy.prototype.fault = function(serviceRequest) {
        if(serviceRequest .hasCallback && serviceRequest.hasCallback()) {
            serviceRequest.notifyObserver(new puremvc.Notification(model.request.ServiceRequest.FAULT, serviceRequest));
        } else {
            console.log(serviceRequest);
        }
    };

    BrandProxy.NAME = 'BrandProxy';

    model.BrandProxy = BrandProxy;

}());
(function(){

    function EntitlementProxy(data) {
        puremvc.Proxy.call(this, this.constructor.NAME, data);
        this.entitlement = new model.delegate.Entitlement();
    }

    EntitlementProxy.prototype = Object.create(puremvc.Proxy.prototype);
    EntitlementProxy.prototype.constructor = EntitlementProxy;

    EntitlementProxy.prototype.signInWithCredentials = function(serviceRequest) {
        this.entitlement.signInWithCredentials(serviceRequest.getRequestVO())
            .then(this.result.bind(this, serviceRequest), this.fault.bind(this, serviceRequest));
    };

    EntitlementProxy.prototype.renewAuthToken = function(serviceRequest) {
        this.entitlement.renewAuthToken(serviceRequest.getRequestVO())
            .then(this.result.bind(this, serviceRequest), this.fault.bind(this, serviceRequest));
    };

    EntitlementProxy.prototype.result = function(serviceRequest) {
        if(serviceRequest.hasCallback()) {
            serviceRequest.notifyObserver(new puremvc.Notification(model.request.ServiceRequest.RESULT, serviceRequest));
        }
    };

    EntitlementProxy.prototype.fault = function(serviceRequest) {
        if(serviceRequest .hasCallback && serviceRequest.hasCallback()) {
            serviceRequest.notifyObserver(new puremvc.Notification(model.request.ServiceRequest.FAULT, serviceRequest));
        } else {
            console.log(serviceRequest);
        }
    };

    EntitlementProxy.NAME = 'EntitlementProxy';

    model.EntitlementProxy = EntitlementProxy;

}());
(function(){

    function ProductProxy() {
        puremvc.Proxy.call(this, this.constructor.NAME, null);
        this.product = new model.delegate.Product();
    }

    ProductProxy.prototype = Object.create(puremvc.Proxy.prototype);
    ProductProxy.prototype.constructor = ProductProxy;

    ProductProxy.prototype.get = function(serviceRequest) {
        this.product.get(serviceRequest.getRequestVO())
            .then(this.result.bind(this, serviceRequest), this.fault.bind(this, serviceRequest));
    };

    ProductProxy.prototype.delete = function(serviceRequest) {
        this.product.delete(serviceRequest.getRequestVO())
            .then(this.result.bind(this, serviceRequest), this.fault.bind(this, serviceRequest));
    };

    ProductProxy.prototype.result = function(serviceRequest) {
        if(serviceRequest.hasCallback()) {
            serviceRequest.notifyObserver(new puremvc.Notification(model.request.ServiceRequest.RESULT, serviceRequest));
        }
    };

    ProductProxy.prototype.fault = function(serviceRequest) {
        if(serviceRequest .hasCallback && serviceRequest.hasCallback()) {
            serviceRequest.notifyObserver(new puremvc.Notification(model.request.ServiceRequest.FAULT, serviceRequest));
        } else {
            console.log(serviceRequest);
        }
    };

    ProductProxy.NAME = 'ProductProxy';

    model.ProductProxy = ProductProxy;

}());
(function(){

    function ApplicationMediator() {
        puremvc.Mediator.call(this, this.constructor.NAME, new view.components.Application());
    }

    ApplicationMediator.prototype = Object.create(puremvc.Mediator.prototype);
    ApplicationMediator.prototype.constructor = ApplicationMediator;

    ApplicationMediator.prototype.onRegister = function() {
        this.facade.registerMediator(new view.BrandMediator());
        this.facade.registerMediator(new view.ProductMediator());
    };

    ApplicationMediator.prototype.requestConfirm = function(requestVO, message) {
        return this.viewComponent.requestConfirm(requestVO, message);
    };

    ApplicationMediator.prototype.requestAlert = function(requestVO, message) {
        return this.viewComponent.requestAlert(requestVO, message);
    };

    ApplicationMediator.NAME = 'ApplicationMediator';

    view.ApplicationMediator = ApplicationMediator;

}());
(function(){

    function BrandMediator() {
        puremvc.Mediator.call(this, this.constructor.NAME, new view.components.Brand());
    }

    BrandMediator.prototype = Object.create(puremvc.Mediator.prototype);
    BrandMediator.prototype.constructor = BrandMediator;

    BrandMediator.prototype.onRegister = function() {
        var self = this;
        function IDelegate(){
            this.requestConfirm = self.requestConfirm.bind(self);
            this.service = self.service.bind(self);
        }
        this.viewComponent.setDelegate(new IDelegate());
        this.viewComponent.initializeBrand();
    };

    BrandMediator.prototype.requestConfirm = function(requestVO, message) {
        var applicationMediator = this.facade.retrieveMediator(view.ApplicationMediator.NAME);
        applicationMediator.requestConfirm(requestVO, message)
            .then(BrandMediator.prototype.service.bind(this));
    };

    BrandMediator.prototype.service = function(requestVO) {
        this.sendNotification(ApplicationFacade.BRAND, requestVO);
    };

    BrandMediator.prototype.listNotificationInterests = function() {
        return [
            ApplicationFacade.BRAND_RESULT,
            ApplicationFacade.BRAND_FAULT
        ];
    };

    BrandMediator.prototype.handleNotification = function(notification) {
        switch(notification.getName()) {
            case ApplicationFacade.BRAND_RESULT:
                this.viewComponent.result(notification.getBody());
                break;
            case ApplicationFacade.BRAND_FAULT:
                this.viewComponent.fault(notification.getBody());
                break;
        }
    };

    BrandMediator.NAME = 'BrandMediator';

    view.BrandMediator = BrandMediator;

}());
(function(){

    function ProductMediator() {
        puremvc.Mediator.call(this, this.constructor.NAME, new view.components.Product());
    }

    ProductMediator.prototype = Object.create(puremvc.Mediator.prototype);
    ProductMediator.prototype.constructor = ProductMediator;

    ProductMediator.prototype.onRegister = function() {
        var self = this;
        function IDelegate(){
            this.service = self.service.bind(self);
        }
        this.viewComponent.setDelegate(new IDelegate());
        this.viewComponent.initializeProduct();

    };

    ProductMediator.prototype.service = function(requestVO) {
        this.sendNotification(ApplicationFacade.PRODUCT, requestVO);
    };

    ProductMediator.prototype.listNotificationInterests = function() {
        return [
            ApplicationFacade.PRODUCT_RESULT,
            ApplicationFacade.PRODUCT_FAULT,
            ApplicationFacade.BRAND_RESULT
        ];
    };

    ProductMediator.prototype.handleNotification = function(notification) {
        switch(notification.getName()) {
            case ApplicationFacade.PRODUCT_RESULT:
                this.viewComponent.result(notification.getBody());
                break;
            case ApplicationFacade.PRODUCT_FAULT:
                this.viewComponent.fault(notification.getBody());
                break;
            case ApplicationFacade.BRAND_RESULT:
                this.viewComponent.render(notification.getBody());
                break;
        }
    };

    ProductMediator.NAME = 'ProductMediator';

    view.ProductMediator = ProductMediator;

}());
(function(){

    function Brand() {}

    Brand.prototype.get = function(requestVO) {
        return new Promise(function(resolve, reject){
            var xmlHttpRequest = new XMLHttpRequest();
            xmlHttpRequest.open("GET", "http://localhost:8080/brands", true);
            xmlHttpRequest.onreadystatechange = function() {
                if (xmlHttpRequest.readyState === 4) {
                    try {
                        var data = JSON.parse(xmlHttpRequest.response);
                    } catch (error) {
                        requestVO.setResultData(error);
                        reject(requestVO);
                        return;
                    }
                    if(xmlHttpRequest.status === 200) {
                        requestVO.setResultData(data);
                        resolve(requestVO);
                    } else {
                        requestVO.setResultData(data);
                        reject(requestVO);
                    }
                }
            };
            xmlHttpRequest.addEventListener("error", function(error){requestVO.setResultData(error);reject(requestVO);});
            xmlHttpRequest.send();
        });
    };

    Brand.prototype.post = function(requestVO) {
        return new Promise(function(resolve, reject) {
            var xmlHttpRequest = new XMLHttpRequest();
            xmlHttpRequest.open("POST", "http://localhost:8080/brands", true);
            xmlHttpRequest.onreadystatechange = function() {
                if (xmlHttpRequest.readyState === 4) {
                    try {
                        var data = JSON.parse(xmlHttpRequest.response);
                    } catch (error) {
                        requestVO.setResultData(error);
                        reject(requestVO);
                        return;
                    }
                    if(xmlHttpRequest.status === 201) {
                        requestVO.setResultData(data);
                        resolve(requestVO);
                    } else {
                        requestVO.setResultData(data);
                        reject(requestVO);
                    }
                }
            };
            xmlHttpRequest.addEventListener("error", function(error){requestVO.setResultData(error);reject(requestVO);});
            xmlHttpRequest.send(JSON.stringify(requestVO.getRequestData()));
        });
    };

    Brand.prototype.delete = function(requestVO) {
        return new Promise(function(resolve, reject) {
            var xmlHttpRequest = new XMLHttpRequest();
            xmlHttpRequest.open("DELETE", "http://localhost:8080/brands/" + requestVO.getRequestData().id, true);
            xmlHttpRequest.onreadystatechange = function() {
                if (xmlHttpRequest.readyState === 4) {
                    if(xmlHttpRequest.status === 204) {
                        resolve(requestVO);
                    } else {
                        reject(requestVO);
                    }
                }
            };
            xmlHttpRequest.addEventListener("error", function(error){requestVO.setResultData(error);reject(requestVO);});
            xmlHttpRequest.send();
        });
    };

    model.delegate.Brand = Brand;

})();
(function(){

    function Entitlement() {}

    Entitlement.prototype.signInWithCredentials = function(requestVO) {
        return new Promise(function(resolve, reject){
            var body = "<credentials> \
                            <emailAddress>" + requestVO.getRequestData().username + "</emailAddress> \
                            <password>" + requestVO.getRequestData().password + "</password> \
                        </credentials>";

            var xmlHttpRequest = new XMLHttpRequest();
            xmlHttpRequest.open("POST", "http://localhost:8080/entitlement/SignInWithCredentials", true);
            xmlHttpRequest.onreadystatechange = function() {
                if (xmlHttpRequest.readyState === 4) {
                    if(xmlHttpRequest.status === 200) {
                        requestVO.setResultData(xmlHttpRequest.responseXML);
                        resolve(requestVO);
                    } else {
                        requestVO.setResultData(xmlHttpRequest.responseXML);
                        reject(requestVO);
                    }
                }
            };
            xmlHttpRequest.addEventListener("error", function(error){requestVO.setResultData(error);reject(requestVO);});
            xmlHttpRequest.send(body);
        });
    };

    Entitlement.prototype.renewAuthToken = function(requestVO) {
        return new Promise(function(resolve, reject){
            var xmlHttpRequest = new XMLHttpRequest();
            xmlHttpRequest.open("GET", "http://localhost:8080/entitlement/renewAuthToken?authToken=" + requestVO.getRequestData(), true);
            xmlHttpRequest.onreadystatechange = function() {
                if (xmlHttpRequest.readyState === 4) {
                    if(xmlHttpRequest.status === 200) {
                        requestVO.setResultData(xmlHttpRequest.responseXML);
                        resolve(requestVO);
                    } else {
                        requestVO.setResultData(xmlHttpRequest.responseXML);
                        reject(requestVO);
                    }
                }
            };
            xmlHttpRequest.addEventListener("error", function(error){requestVO.setResultData(error);reject(requestVO);});
            xmlHttpRequest.send();
        });
    };

    model.delegate.Entitlement = Entitlement;

})();
(function(){

    function Product() {
    }

    Product.prototype.get = function(requestVO) {
        return new Promise(function(resolve, reject){
            var xmlHttpRequest = new XMLHttpRequest();
            xmlHttpRequest.open("GET", "http://localhost:8080/products", true);
            xmlHttpRequest.onreadystatechange = function() {
                if (xmlHttpRequest.readyState === 4) {
                    try {
                        var data = JSON.parse(xmlHttpRequest.response);
                    } catch (error) {
                        requestVO.setResultData(error);
                        reject(requestVO);
                        return;
                    }
                    if(xmlHttpRequest.status === 200) {
                        requestVO.setResultData(data);
                        resolve(requestVO);
                    } else {
                        requestVO.setResultData(data);
                        reject(requestVO);
                    }
                }
            };
            xmlHttpRequest.addEventListener("error", function(error){requestVO.setResultData(error);reject(requestVO);});
            xmlHttpRequest.send();
        });
    };

    Product.prototype.delete = function(requestVO) {
        return new Promise(function(resolve, reject) {
            var xmlHttpRequest = new XMLHttpRequest();
            xmlHttpRequest.open("DELETE", "http://localhost:8080/products/" + requestVO.getRequestData().id, true);
            xmlHttpRequest.onreadystatechange = function() {
                if (xmlHttpRequest.readyState === 4) {
                    if(xmlHttpRequest.status === 204) {
                        resolve(requestVO);
                    } else {
                        reject(requestVO);
                    }
                }
            };
            xmlHttpRequest.addEventListener("error", function(error){requestVO.setResultData(error);reject(requestVO);});
            xmlHttpRequest.send();
        });
    };

    model.delegate.Product = Product;

})();
(function(){

    function ServiceRequest(requestVO, callback, caller) {
        puremvc.Observer.call(this, callback, caller);
        this.requestVO = requestVO;
    }

    ServiceRequest.prototype = Object.create(puremvc.Observer.prototype);
    ServiceRequest.prototype.constructor = ServiceRequest;

    ServiceRequest.prototype.setObserver = function(callback, caller) {
        this.setNotifyMethod(callback);
        this.setNotifyContext(caller);
    };

    ServiceRequest.prototype.hasCallback = function() {
        return this.getNotifyContext() && this.getNotifyContext();
    };

    ServiceRequest.prototype.getRequestVO = function() {
        return this.requestVO;
    };

    ServiceRequest.RESULT = 'result';
    ServiceRequest.FAULT = 'fault';

    model.request.ServiceRequest = ServiceRequest;

}());
(function(){

    function RequestVO(requestData, requestType) {
        this.requestData = requestData;
        this.requestType = requestType;
    }

    RequestVO.prototype.getRequestData = function() {
        return this.requestData;
    };

    RequestVO.prototype.getRequestType = function() {
        return this.requestType;
    };

    RequestVO.prototype.setResultData = function(resultData) {
        this.resultData = resultData;
    };

    RequestVO.prototype.getResultData = function() {
        return this.resultData;
    };

    model.vo.RequestVO = RequestVO;

}());
(function(){

    function Application() {
        location.hash = "";
        window.onhashchange = this.onhashchange.bind(this);
        this.popup = new view.components.Popup();
    }

    Application.prototype.requestConfirm = function(requestVO, message) {
        return this.popup.requestConfirm(requestVO, message);
    };

    Application.prototype.requestAlert = function(requestVO, message) {
        return this.popup.requestAlert(requestVO, message);
    };

    Application.prototype.onhashchange = function(event) {
    };

    view.components.Application = Application;

}());
(function(){

    function Brand() {
        var self = this;
        this.element = document.getElementById("brand_list");
        document.getElementById("brandAdd").addEventListener("click", function(event){
            var name = document.getElementById("brand").value;
            if(name.trim() != "") {
                Brand.prototype.post.call(self, {name: name, event: event});
            }
        });
    }

    Brand.prototype.initializeBrand = function () {
        this.get();
    };

    Brand.prototype.get = function() {
        this.delegate.service(new model.vo.RequestVO(null, AppConstants.GET));
    };

    Brand.prototype.post = function(data) {
        this.delegate.service(new model.vo.RequestVO(data, AppConstants.POST));
    };

    Brand.prototype.delete = function(data) {
        this.delegate.requestConfirm(new model.vo.RequestVO(data, AppConstants.DELETE), "Are you sure you want to delete?");
    };

    Brand.prototype.result = function(requestVO) {
        switch (requestVO.getRequestType()) {
            case AppConstants.GET:
                this.element.innerHTML = "";
                var data = requestVO.getResultData();
                for(var i=0; i<data.length; i++) {
                    this.appendChild(data[i]);
                }
                break;
            case AppConstants.POST:
                document.getElementById("brand").value = "";
                var data = requestVO.getResultData();
                this.appendChild(data);
                break;
            case AppConstants.DELETE:
                var data = requestVO.getRequestData();
                this.removeChild(data);
                break;
        }
    };

    Brand.prototype.fault = function(requestVO) {
        console.error(requestVO);
    };

    Brand.prototype.appendChild = function(data) {
        var self = this;
        var li = document.createElement("li");
        li.innerHTML = "<p>" + data.name + "</p>";

        var p = document.createElement("p");
        p.setAttribute("class", "edit");
        p.innerHTML = "Delete";
        li.appendChild(p);

        p.addEventListener("click", function(event){
            Brand.prototype.delete.call(self, {id: data.id, event: event});
        });

        this.element.appendChild(li);
    };

    Brand.prototype.removeChild = function(data) {
        var element = data.event.target;
        var grandparent = element.parentNode.parentNode;
        grandparent.removeChild(element.parentNode);
    };

    Brand.prototype.onhashchange = function(event) {
        var hash = location.hash.slice(2);
        if(hash.indexOf("/brand") == -1) return;
        switch(hash) {
            case "/brands":
                break;
        }
    };

    Brand.prototype.setDelegate = function(delegate) {
        this.delegate = delegate;
    };

    view.components.Brand = Brand;

})();
(function(){

    function Login(delegate) {
        this.delegate = delegate;
        this.intervalId = null;
        this.username = document.getElementById("username");
        this.password = document.getElementById("password");
        this.loader = document.getElementById("loader");
        this.signIn = document.getElementById("signIn");
        document.getElementById("signIn").addEventListener("click", this.signInWithCredentials.bind(this));
        document.getElementById("signOut").addEventListener("click", this.signOut.bind(this));

        this.renewAuthToken();

        this.username.value = "admin@realogy.com";
        this.password.value = "admin101!";
    }

    Login.prototype.signOut = function() {
        clearInterval(this.intervalId);
        localStorage.removeItem("authToken");
        document.getElementById("login").classList.remove("hidden");
        document.getElementById("main").classList.add("hidden");
        document.getElementById("profile").classList.add("hidden");
    };

    Login.prototype.setInterval = function() {
        this.intervalId = setInterval(Login.prototype.renewAuthToken.bind(this), 5 * 60 * 1000);
    };

    Login.prototype.renewAuthToken = function() {
        if(localStorage.getItem("authToken")) {
            this.delegate.service(new model.vo.RequestVO(localStorage.getItem("authToken"), AppConstants.RENEW_AUTH_TOKEN));
        } else {
            this.renewAuthToken_fail();
        }
    };

    Login.prototype.renewAuthToken_success = function(requestVO) {
        this.signInWithCredentials_success(requestVO);
    };

    Login.prototype.renewAuthToken_fail = function(requestVO) {
        document.getElementById("login").classList.remove("hidden");
        document.getElementById("main").classList.add("hidden");
        localStorage.removeItem("authToken");
    };

    Login.prototype.signInWithCredentials = function(event) {
        if(this.username.value.trim() != "" && this.password.value.trim() != "") {
            this.enableFields(false);
            location.hash = "#!/login";
        }
    };

    Login.prototype.signInWithCredentials_success = function(requestVO) {
        this.enableFields(true);
        localStorage.setItem("authToken", requestVO.getResultData().getElementsByTagName("authToken")[0].firstChild.nodeValue);
        document.getElementById("login").classList.add("hidden");
        document.getElementById("main").classList.remove("hidden");

        document.getElementById("invalid").classList.add("hidden");
        location.hash = "#!/brands";

        this.setInterval();
    };

    Login.prototype.signInWithCredentials_fail = function(requestVO) {
        this.enableFields(true);
        document.getElementById("invalid").classList.remove("hidden");
    };

    Login.prototype.enableFields = function(enabled) {
        enabled ? this.username.removeAttribute("disabled") : this.username.setAttribute("disabled", "disabled");
        enabled ? this.password.removeAttribute("disabled") : this.password.setAttribute("disabled", "disabled");
        enabled ? this.signIn.removeAttribute("disabled") : this.signIn.setAttribute("disabled", "disabled");
        enabled ? this.loader.classList.add("hidden") : this.loader.classList.remove("invisible");
    };

    Login.prototype.onhashchange = function(event) {
        if(location.hash.indexOf("/login") == -1) return;
        switch(location.hash.slice(2)) {
            case "/login":
                this.delegate.service(new model.vo.RequestVO({username: this.username.value.trim(), password: this.password.value.trim()}, AppConstants.SIGN_IN_WITH_CREDENTIALS));
            break;
        }
    };

    view.components.Login = Login;

})();
$(document).ready(function() {

    $('.menu-btn').click( function() {
        if ( !$( this ).hasClass( "active" ) ) {
            $('.menu-btn').addClass('active');
        } else {
            $('.menu-btn').removeClass('active');
        }
        var toggleMenu = $(".nav").width() == 0 ? "100%" : "0px";
        var toggleContent = $("section").width() == 0 ? "100%" : "0";
        $('.nav').animate({ width: toggleMenu });
        $('section').animate({ width: toggleContent });
    });

    $('#user-btn').click( function(){
        $('.user-info').toggleClass('hidden');
    });

    $(".nav a").click(function(event) {
        event.preventDefault();
        location.hash = $(this).attr("data-hash");
        $(this).parent().addClass("active");
        $(this).parent().siblings().removeClass("active");
        var tab = $(this).attr("data-href");
        $(".content").not(tab).css("display", "none");
        $(tab).fadeIn();

        var mq = window.matchMedia( "(max-width: 480px)" );
        if (mq.matches) {
            $('.nav').css('width','0');
            $('section').css('width','100%');
        }
        if ( !$('.menu-btn').hasClass( "active" ) ) {
            $('.menu-btn').addClass('active');
        } else {
            $('.menu-btn').removeClass('active');
        }
    });
});

$(document).ready( function() {

});
(function(){

    var confirm = document.getElementById('confirm');
    var confirmMessage = document.getElementById('confirmMessage');
    var confirmOK = document.getElementById('confirmOK');
    var confirmCancel = document.getElementById('confirmCancel');

    var alert = document.getElementById('alert');
    var alertMessage = document.getElementById('alertMessage');
    var alertOK = document.getElementById('alertOK');

    function Popup(){
    }

    Popup.prototype.requestAlert = function(requestVO, message) {
        return new Promise(function(resolve, reject){
            alertMessage.innerHTML = message;
            alert.classList.remove('hidden');
            alertOK.addEventListener('click', function handler(event){
                alertOK.removeEventListener('click', handler);
                alert.classList.add('hidden');
                resolve(requestVO);
            });
        });
    };

    Popup.prototype.requestConfirm = function(requestVO, message) {
        return new Promise(function(resolve, reject){
            confirmMessage.innerHTML = message;
            confirm.classList.remove('hidden');
            confirmOK.addEventListener('click', ok);
            confirmCancel.addEventListener('click', cancel);

            function ok(event) {
                confirmOK.removeEventListener('click', ok);
                confirmCancel.removeEventListener('click', cancel);
                confirm.classList.add('hidden');
                resolve(requestVO);
            }
            function cancel(event) {
                confirmOK.removeEventListener('click', ok);
                confirmCancel.removeEventListener('click', cancel);
                confirm.classList.add('hidden');
                reject(requestVO);
            }
        });
    };

    view.components.Popup = Popup;

}());
(function(){

    function Product() {
        this.element = document.getElementById("product");
        this.brands = new Array();
        // if($( "#product" ).accordion( "instance" )) {
        //     $('#product').accordion("refresh");
        // }
    }

    Product.prototype.initializeProduct = function() {
        this.get();
    };

    Product.prototype.get = function() {
        this.delegate.service(new model.vo.RequestVO(null, AppConstants.GET));
    };

    Product.prototype.result = function(requestVO) {
        switch (requestVO.getRequestType()) {
            case AppConstants.GET:
                var data = requestVO.getResultData();
                for(var i=0; i<data.length; i++) {
                    //this.appendChild(data[i]);
                }
                break;
        }
    };

    Product.prototype.render = function(requestVO) {
        switch (requestVO.getRequestType()) {
            case AppConstants.GET:
                var data = requestVO.getResultData();
                for(var i=0; i<data.length; i++) {
                    //this.appendBrand(data[i]);
                }
                break;
        }
    };

    Product.prototype.appendBrand = function(data) {
        // var option = document.createElement("option");
        // option.setAttribute("value", data.id);
        // option.setAttribute("id", "brandSelect_" + data.id);
        // option.appendChild(document.createTextNode(data.name));
        // this.brandSelect.appendChild(option);
        // products section
        var h3 = document.createElement("h3");
        h3.appendChild(document.createTextNode(data.name));
        this.element.appendChild(h3);

        var div = document.createElement("div");
        var ul = document.createElement("ul");
        ul.setAttribute("id", "product_brand_" + data.id);
        div.appendChild(ul);

        this.element.appendChild(div);
    };

    Product.prototype.appendChild = function(data) {
        //var h3 = document.createElement("h3");
    };

    Product.prototype.fault = function(requestVO) {
        console.error(requestVO);
    };

    Product.prototype.setDelegate = function(delegate) {
        this.delegate = delegate;
    };

    Product.prototype.get_success = function(requestVO) {
        var self = this;
        this.data = requestVO.getResultData();
        for(var i=0; i<this.data.length; i++) {
            var ul1 = document.getElementById("accordion_brand_" + this.data[i].brandId + "_products");
            var li = document.createElement("li");
            li.setAttribute("id", "accordion_brand_" + this.data[i].brandId + "_product_" + this.data[i].id);
            li.appendChild(document.createTextNode(this.data[i].name));
            ul1.appendChild(li);

            var ul2 = document.getElementById("accordion_brand_" + this.data[i].brandId + "_category");
            li = document.createElement("li");
            li.setAttribute("id", "accordion_brand_" + this.data[i].brandId +"_category_" + this.data[i].id);
            li.appendChild(document.createTextNode(this.data[i].category));
            ul2.appendChild(li);

            var ul3 = document.getElementById("accordion_brand_" + this.data[i].brandId + "_delete");
            li = document.createElement("li");
            li.setAttribute("id", "accordion_brand_" + this.data[i].brandId + "_delete_" + this.data[i].id);
            li.appendChild(document.createTextNode("Delete"));
            li.addEventListener("click", function(id, brandId){
                return function(event) {
                    console.log('delete to', {id: id, brandId: brandId});
                    self.delegate.requestConfirm(new model.vo.RequestVO({id: id, brandId: brandId}, AppConstants.DELETE_PRODUCTS), "Are you sure you want to delete?");
                }
            }(this.data[i].id, this.data[i].brandId));
            ul3.appendChild(li);
        }
        this.activate();
    };

    Product.prototype.delete_success = function(requestVO) {
        var product = requestVO.getRequestData();

        var target = document.getElementById("accordion_brand_" + product.brandId + "_product_" + product.id);
        target.parentNode.removeChild(target);

        target = document.getElementById("accordion_brand_" + product.brandId + "_category_" + product.id);
        target.parentNode.removeChild(target);

        target = document.getElementById("accordion_brand_" + product.brandId + "_delete_" + product.id);
        target.parentNode.removeChild(target);
    };

    Product.prototype.setBrands = function(requestVO) {
        var data = requestVO.getResultData();
        for(var i=0; i<data.length; i++) {
            this.appendBrand(data[i]);
        }
    };

    Product.prototype.deleteBrand = function(id) {
        var element = document.getElementById("brandSelect_" + id);
        element.parentNode.removeChild(element);
    };

    Product.prototype.onhashchange = function(event) {
        var hash = location.hash.slice(2);
        if(hash.indexOf("/products") == -1) return;
        switch(hash) {
            case "/products":
                if(this.data == null) this.delegate.service(new model.vo.RequestVO(null, AppConstants.GET_PRODUCTS));
                break;
        }
    };

    Product.prototype.activate = function() {
        $('#product').accordion({
            heightStyle: "content",
            collapsible:true,
            beforeActivate: function(event, ui) {
                // The accordion believes a panel is being opened
                if (ui.newHeader[0]) {
                    var currHeader  = ui.newHeader;
                    var currContent = currHeader.next('.ui-accordion-content');
                    // The accordion believes a panel is being closed
                } else {
                    var currHeader  = ui.oldHeader;
                    var currContent = currHeader.next('.ui-accordion-content');
                }
                // Since we've changed the default behavior, this detects the actual status
                var isPanelSelected = currHeader.attr('aria-selected') == 'true';

                // Toggle the panel's header
                currHeader.toggleClass('ui-corner-all',isPanelSelected).toggleClass('accordion-header-active ui-state-active ui-corner-top',!isPanelSelected).attr('aria-selected',((!isPanelSelected).toString()));

                // Toggle the panel's icon
                currHeader.children('.ui-icon').toggleClass('ui-icon-triangle-1-e',isPanelSelected).toggleClass('ui-icon-triangle-1-s',!isPanelSelected);

                // Toggle the panel's content
                currContent.toggleClass('accordion-content-active',!isPanelSelected)
                if (isPanelSelected) { currContent.slideUp(); }  else { currContent.slideDown(); }

                return false; // Cancels the default action
            }
        });
    };

    view.components.Product = Product;

})();

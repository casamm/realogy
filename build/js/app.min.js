function AppConstants() {}

AppConstants.LOGIN = "login";
AppConstants.DEVICE_READY = 'deviceReady';
AppConstants.AGENDA = 'agenda';
var controller = {};
var model = {vo: {}, request: {}, delegate: {}};
var view = {components: {}};

function ApplicationFacade(multitonKey) {
    puremvc.Facade.call(this, multitonKey);
}

ApplicationFacade.prototype = Object.create(puremvc.Facade.prototype);
ApplicationFacade.prototype.constructor = ApplicationFacade;

ApplicationFacade.prototype.initializeController = function() {
    puremvc.Facade.prototype.initializeController.call(this);
    this.registerCommand(ApplicationFacade.STARTUP, controller.StartupCommand);
};


ApplicationFacade.prototype.startup = function() {
    this.sendNotification(this.constructor.STARTUP);
};

ApplicationFacade.getInstance = function(multitonKey) {
    if(puremvc.Facade.instanceMap[multitonKey] == null) {
        puremvc.Facade.instanceMap[multitonKey] = new ApplicationFacade(multitonKey);
    }
    return puremvc.Facade.instanceMap[multitonKey];
};

ApplicationFacade.STARTUP = 'startup';
ApplicationFacade.SERVICE = 'service';
ApplicationFacade.SERVICE_RESULT = 'serviceResult';
ApplicationFacade.SERVICE_FAULT = 'serviceFault';
(function(){

    function ServiceCommand(){
        puremvc.SimpleCommand.call(this);
    }

    ServiceCommand.prototype = Object.create(puremvc.SimpleCommand.prototype);
    ServiceCommand.prototype.constructor = ServiceCommand;

    ServiceCommand.prototype.execute = function(notification) {
        var requestVO = notification.getBody();
        var serviceRequest = new model.request.ServiceRequest(requestVO, this.result, this);
        var serviceProxy = this.facade.retrieveProxy(model.ServiceProxy.NAME);

        switch(requestVO.getRequestData().getType()) {
            case AppConstants.LOGIN:
                serviceProxy.login(serviceRequest);
                break;
            case AppConstants.AGENDA:
                break;
        }
    };

    ServiceCommand.prototype.result = function(notification) {
        var serviceRequest = notification.getBody();
        switch (notification.getName()) {
            case model.request.ServiceRequest.RESULT:
                this.sendNotification(ApplicationFacade.SERVICE_RESULT, serviceRequest.getRequestVO());
                break;
            case model.request.ServiceRequest.FAULT:
                this.sendNotification(ApplicationFacade.SERVICE_FAULT, serviceRequest.getRequestVO());
                break;
        }
    };

    controller.ServiceCommand = ServiceCommand;

}());
(function(){
    function StartupCommand(){
        puremvc.SimpleCommand.call(this);
    }

    StartupCommand.prototype = Object.create(puremvc.SimpleCommand.prototype);
    StartupCommand.prototype.constructor = StartupCommand;

    StartupCommand.prototype.execute = function(notification) {
        this.facade.registerCommand(ApplicationFacade.SERVICE, controller.ServiceCommand);
        this.facade.registerProxy(new model.ServiceProxy());
        this.facade.registerMediator(new view.ApplicationMediator());
    };

    controller.StartupCommand = StartupCommand;
}());
(function(){

    function ServiceProxy(data) {
        puremvc.Proxy.call(this, this.constructor.NAME, data);
        this.entitlement = new model.delegate.Entitlement();
    }

    ServiceProxy.prototype = Object.create(puremvc.Proxy.prototype);
    ServiceProxy.prototype.constructor = ServiceProxy;

    ServiceProxy.prototype.login = function(serviceRequest) {
        this.entitlement.signInWithCredentials(serviceRequest.getRequestVO())
            .then(this.result, this.fault);
    };

    ServiceProxy.prototype.result = function(serviceRequest) {
        if(serviceRequest.hasCallback()) {
            serviceRequest.notifyObserver(new puremvc.Notification(model.request.ServiceRequest.RESULT, serviceRequest));
        }
    };

    ServiceProxy.prototype.fault = function(serviceRequest) {
        if(serviceRequest.hasCallback()) {
            serviceRequest.notifyObserver(new puremvc.Notification(model.request.ServiceRequest.FAULT, serviceRequest));
        }
    };

    ServiceProxy.NAME = 'ServiceProxy';

    model.ServiceProxy = ServiceProxy;

}());
(function(){

    function ApplicationMediator() {
        puremvc.Mediator.call(this, this.constructor.NAME, new view.components.Application());
    }

    ApplicationMediator.prototype = Object.create(puremvc.Mediator.prototype);
    ApplicationMediator.prototype.constructor = ApplicationMediator;

    ApplicationMediator.prototype.onRegister = function() {
        var self = this;
        function IDelegate(){
            this.service = self.service.bind(self);
        }
        this.viewComponent.setDelegate(new IDelegate());
        this.viewComponent.creationComplete();
    };

    ApplicationMediator.prototype.service = function(requestVO) {
        this.sendNotification(ApplicationFacade.SERVICE, requestVO);
    };

    ApplicationMediator.prototype.listNotificationInterests = function() {
        return [
            ApplicationFacade.SERVICE_RESULT,
            ApplicationFacade.SERVICE_FAULT
        ];
    };

    ApplicationMediator.prototype.handleNotification = function(notification) {
        switch(notification.getName()) {
            case ApplicationFacade.SERVICE_RESULT:
                this.viewComponent.service_result(notification.getBody());
                break;
            case ApplicationFacade.SERVICE_FAULT:
                this.viewComponent.service_fault(notification.getBody());
                break;
        }
    };

    ApplicationMediator.NAME = 'ApplicationMediator';

    view.ApplicationMediator = ApplicationMediator;

}());
(function(){

    function Entitlement() {}

    Entitlement.prototype.signInWithCredentials = function(requestVO) {
        return new Promise(function(resolve, reject){
            var requestData = requestVO.getRequestData();
            var body = '<credentials> \
                            <emailAddress>' + requestData.getData().username + '</emailAddress> \
                            <password>' + requestData.getData().password + '</password> \
                        </credentials>';

            var xmlHttpRequest = new XMLHttpRequest();
            xmlHttpRequest.open("POST", "http://localhost:8080/entitlement/SignInWithCredentials", true);
            xmlHttpRequest.onreadystatechange = function() {
                if (xmlHttpRequest.readyState === 4) {
                    if(xmlHttpRequest.status === 200) {
                        requestVO.setResultData(new model.vo.ResultData(xmlHttpRequest.responseXML, null));
                        resolve(requestVO);
                    } else {
                        requestVO.setResultData(new model.vo.ResultData(null, xmlHttpRequest.responseXML));
                        reject(requestVO);
                    }
                }
            };
            xmlHttpRequest.addEventListener("error", function(error){
                requestVO.setResultData(new model.vo.ResultData(null, error));
                reject(requestVO);
            });
            xmlHttpRequest.send(body);
        });
    };

    model.delegate.Entitlement = Entitlement;

})();
(function(){

    function ServiceRequest(requestVO, callback, caller) {
        puremvc.Observer.call(this, callback, caller);
        this.requestVO = requestVO;
    }

    ServiceRequest.prototype = Object.create(puremvc.Observer.prototype);
    ServiceRequest.prototype.constructor = ServiceRequest;

    ServiceRequest.prototype.setObserver = function(callback, caller) {
        this.setNotifyMethod(callback);
        this.setNotifyContext(caller);
    };

    ServiceRequest.prototype.hasCallback = function() {
        return this.getNotifyContext() && this.getNotifyContext();
    };

    ServiceRequest.prototype.getRequestVO = function() {
        return this.requestVO;
    };

    ServiceRequest.RESULT = 'result';
    ServiceRequest.FAULT = 'fault';

    model.request.ServiceRequest = ServiceRequest;

}());
(function(){

    function RequestData(data, type) {
        this.data = data;
        this.type = type;
    }

    RequestData.prototype.getData = function() {
        return this.data;
    };

    RequestData.prototype.getType = function() {
        return this.type;
    };

    model.vo.RequestData = RequestData;

})();
(function(){

    function RequestVO(requestData) {
        this.requestData = requestData;
    }

    RequestVO.prototype.getRequestData = function() {
        return this.requestData;
    };

    RequestVO.prototype.setResultData = function(resultData) {
        this.resultData = resultData;
    };

    RequestVO.prototype.getResultData = function() {
        return this.resultData;
    };

    model.vo.RequestVO = RequestVO;

}());
(function(){

    function ResultData(data, error) {
        this.data = data;
        this.error = error;
    }

    ResultData.prototype.setData = function(data) {
        this.data = data;
    };

    ResultData.prototype.getData = function() {
        return this.data;
    };

    ResultData.prototype.setError = function(error) {
        this.error = error;
    };

    ResultData.prototype.getError = function() {
        return this.error;
    };

    model.vo.ResultData = ResultData;

})();
(function(){
    function Application() {
        var self = this;
        function IDelegate(){
            this.service = self.service.bind(self);
        }
        this.login = new view.components.Login();
        this.login.setDelegate(new IDelegate());
    }

    Application.prototype.creationComplete = function() {
    };

    Application.prototype.service = function(requestVO) {
        this.delegate.service(requestVO);
    };

    Application.prototype.service_result = function(requestVO) {
        console.log(requestVO.type);
        switch (requestVO.type) {
            case AppConstants.DEVICE_READY:
                break;
            case AppConstants.AGENDA:
                break;
        }
    };

    Application.prototype.service_fault = function(requestVO) {
        console.error(requestVO.type);
        switch (requestVO.type) {
            case AppConstants.AGENDA:
                console.log('didnt return agenda');
                break;
        }
    };

    Application.prototype.setDelegate = function(delegate) {
        this.delegate = delegate;
    };

    Application.prototype.delegate = null;

    view.components.Application = Application;
}());
(function(){

    function Login() {
        this.delegate = null;
        this.username = document.getElementById("username");
        this.password = document.getElementById("password");
        this.loader = document.getElementById("loader");
        this.signIn = document.getElementById("signIn");
        document.getElementById("signIn").addEventListener("click", this.signIn_clickHandler.bind(this));
    }

    Login.prototype.signIn_clickHandler = function(event) {
        if(this.username.value.trim() != "" && this.password.value.trim() != "") {
            this.username.setAttribute("disabled", "disabled");
            this.password.setAttribute("disabled", "disabled");
            this.signIn.setAttribute("disabled", "disabled");
            this.loader.classList.remove("invisible");
            this.delegate.service(new model.vo.RequestVO(new model.vo.RequestData({username: this.username.value.trim(), password: this.password.value.trim()},
                AppConstants.LOGIN)));
        }
    };

    Login.prototype.setDelegate = function(delegate) {
        this.delegate = delegate;
    };

    view.components.Login = Login;

})();